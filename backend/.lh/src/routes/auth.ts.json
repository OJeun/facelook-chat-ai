{
    "sourceFile": "src/routes/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732236904242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732236904242,
            "name": "Commit-0",
            "content": "import { FastifyInstance } from \"fastify\";\r\nimport axios from \"axios\";\r\nimport dotenv from \"dotenv\";\r\nimport { errorHandler } from \"../services/dbErrorHandler\";\r\n\r\ndotenv.config();\r\n\r\ninterface RegisterRequest {\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n}\r\n\r\ninterface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport async function authRoutes(fastify: FastifyInstance) {\r\n  fastify.post<{ Body: RegisterRequest }>(\r\n    \"/auth/register\",\r\n    {\r\n      schema: {\r\n        tags: [\"auth\"],\r\n        description: \"Register a new user\",\r\n        body: {\r\n          type: \"object\",\r\n          required: [\"email\", \"password\", \"name\"],\r\n          properties: {\r\n            email: { type: \"string\", format: \"email\" },\r\n            password: { type: \"string\", minLength: 6 },\r\n            name: { type: \"string\", minLength: 2 }\r\n          }\r\n        },\r\n        response: {\r\n          200: {\r\n            type: \"object\",\r\n            properties: {\r\n              token: { type: \"string\" },\r\n              user: {\r\n                type: \"object\",\r\n                properties: {\r\n                  id: { type: \"string\" },\r\n                  email: { type: \"string\" },\r\n                  name: { type: \"string\" }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async (request, reply) => {\r\n      try {\r\n        const response = await axios.post(\r\n          process.env.DB_API_URL + \"api/auth/register\",\r\n          request.body\r\n        );\r\n        return response.data;\r\n      } catch (error) {\r\n        errorHandler(error, reply);\r\n      }\r\n    }\r\n  );\r\n\r\n  fastify.post<{ Body: LoginRequest }>(\r\n    \"/auth/login\",\r\n    {\r\n      schema: {\r\n        tags: [\"auth\"],\r\n        description: \"Login user\",\r\n        body: {\r\n          type: \"object\",\r\n          required: [\"email\", \"password\"],\r\n          properties: {\r\n            email: { type: \"string\", format: \"email\" },\r\n            password: { type: \"string\" }\r\n          }\r\n        },\r\n        response: {\r\n          200: {\r\n            type: \"object\",\r\n            properties: {\r\n              token: { type: \"string\" },\r\n              user: {\r\n                type: \"object\",\r\n                properties: {\r\n                  id: { type: \"string\" },\r\n                  email: { type: \"string\" },\r\n                  name: { type: \"string\" }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async (request, reply) => {\r\n      try {\r\n        const response = await axios.post(\r\n          process.env.DB_API_URL + \"api/auth/login\",\r\n          request.body\r\n        );\r\n        return response.data;\r\n      } catch (error) {\r\n        errorHandler(error, reply);\r\n      }\r\n    }\r\n  );\r\n}\r\n"
        }
    ]
}