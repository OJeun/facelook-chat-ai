{
    "sourceFile": "src/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1732235597390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732235771442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,12 @@\n       {\r\n         url: \"http://localhost:3001\",\r\n         description: \"Development server\",\r\n       },\r\n+      {\r\n+        url: \"https://your-production-url.com\",\r\n+        description: \"Production server\",\r\n+      },\r\n     ],\r\n     components: {\r\n       securitySchemes: {\r\n         bearerAuth: {\r\n"
                },
                {
                    "date": 1732236199770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,18 @@\n };\r\n \r\n // add verifyToken hook, but exclude some paths\r\n server.addHook(\"preHandler\", async (request) => {\r\n-  const excludedPaths = [\"/health\", \"/api/auth/login\", \"/api/auth/register\"];\r\n-  if (excludedPaths.includes(request.url)) {\r\n+  const excludedPaths = [\r\n+    \"/health\", \r\n+    \"/api/auth/login\", \r\n+    \"/api/auth/register\",\r\n+    \"/documentation\",\r\n+    \"/documentation/json\",\r\n+    \"/documentation/yaml\",\r\n+    \"/documentation/static/*\"\r\n+  ];\r\n+  if (excludedPaths.includes(request.url) || request.url.startsWith('/documentation/')) {\r\n     return;\r\n   }\r\n \r\n   await verifyToken(request);\r\n"
                }
            ],
            "date": 1732235597390,
            "name": "Commit-0",
            "content": "// src/index.ts\r\nimport fastify, { FastifyInstance, FastifyRequest } from \"fastify\";\r\nimport { authRoutes } from \"./routes/auth\";\r\nimport { friendRoutes } from \"./routes/friend\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { JWTPayload } from \"./models/server\";\r\nimport fastifyWebsocket from \"@fastify/websocket\";\r\nimport Redis from \"ioredis-mock\";\r\nimport { WebSocket } from \"ws\";\r\nimport swagger from '@fastify/swagger'\r\nimport swaggerUi from '@fastify/swagger-ui'\r\n\r\n//add websocket\r\n\r\nconst server: FastifyInstance = fastify({\r\n  logger:\r\n    process.env.NODE_ENV === \"development\"\r\n      ? {\r\n          transport: {\r\n            target: \"pino-pretty\",\r\n          },\r\n        }\r\n      : true, // 在生产环境中使用默认日志配置\r\n});\r\n\r\nconst redis = new Redis(); // Mocked Redis instance\r\nredis.set(\"key\", \"value\", \"EX\", 10); // Temporary cache with expiration\r\nredis.get(\"key\").then((value: any) => console.log(\"Cached Value:\", value));\r\n\r\n// add error handling\r\nprocess.on(\"unhandledRejection\", (err) => {\r\n  console.error(\"unhandled rejection:\", err);\r\n  process.exit(1);\r\n});\r\n\r\n// register plugins\r\nserver.register(require(\"@fastify/cors\"), {\r\n  origin: true, // allow all origins\r\n});\r\nserver.register(require(\"@fastify/formbody\"));\r\nserver.register(fastifyWebsocket, {\r\n  options: {\r\n    maxPayload: 1048576, // 1MB\r\n  },\r\n}); //register websocket\r\n\r\n// health check route\r\nserver.get(\"/health\", async () => {\r\n  return { status: \"ok\", message: \"server is running\" };\r\n});\r\n\r\n// register routes\r\nserver.register(authRoutes, { prefix: \"/api\" }); // add api prefix\r\n\r\nconst verifyToken = async (request: FastifyRequest) => {\r\n  try {\r\n    const token = request.headers.authorization?.replace(\"Bearer \", \"\");\r\n\r\n    if (!token) {\r\n      throw new Error(\"no JWT token provided\");\r\n    }\r\n\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;\r\n\r\n    // check if the token is expired\r\n    if (Date.now() >= decoded.exp * 1000) {\r\n      throw new Error(\"JWT token expired\");\r\n    }\r\n\r\n    return decoded;\r\n  } catch (error) {\r\n    throw new Error(\"invalid JWT token\");\r\n  }\r\n};\r\n\r\n// add verifyToken hook, but exclude some paths\r\nserver.addHook(\"preHandler\", async (request) => {\r\n  const excludedPaths = [\"/health\", \"/api/auth/login\", \"/api/auth/register\"];\r\n  if (excludedPaths.includes(request.url)) {\r\n    return;\r\n  }\r\n\r\n  await verifyToken(request);\r\n});\r\n\r\nserver.register(friendRoutes, { prefix: \"/api\" });\r\n\r\n// Define the WebSocket route\r\nserver.get(\"/ws\", { websocket: true }, (connection: WebSocket) => {\r\n  console.log(\"new WebSocket connection established\");\r\n\r\n  connection.on(\"message\", (message: Buffer) => {\r\n    try {\r\n      console.log(\"received message:\", message.toString());\r\n      connection.send(\"Hello from server!\");\r\n    } catch (error) {\r\n      console.error(\"error when processing message:\", error);\r\n    }\r\n  });\r\n\r\n  connection.on(\"error\", (error: any) => {\r\n    console.error(\"WebSocket error:\", error);\r\n  });\r\n\r\n  connection.on(\"close\", () => {\r\n    console.log(\"connection closed\");\r\n  });\r\n});\r\n\r\n// register swagger\r\nserver.register(swagger, {\r\n  openapi: {\r\n    info: {\r\n      title: 'Facelook API Documentation',\r\n      description: 'API documentation for Facelook backend services',\r\n      version: '1.0.0'\r\n    },\r\n    servers: [\r\n      {\r\n        url: 'http://localhost:3001',\r\n        description: 'Development server'\r\n      }\r\n    ],\r\n    components: {\r\n      securitySchemes: {\r\n        bearerAuth: {\r\n          type: 'http',\r\n          scheme: 'bearer',\r\n          bearerFormat: 'JWT'\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nserver.register(swaggerUi, {\r\n  routePrefix: '/documentation',\r\n  uiConfig: {\r\n    docExpansion: 'list',\r\n    deepLinking: false\r\n  }\r\n})\r\n\r\nconst start = async () => {\r\n  try {\r\n    const address = await server.listen({\r\n      port: 3001,\r\n      host: \"0.0.0.0\",\r\n    });\r\n    console.log(`server started at: ${address}`);\r\n  } catch (err) {\r\n    console.error(\"server start failed:\", err);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\nstart();\r\n"
        }
    ]
}