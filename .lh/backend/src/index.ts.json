{
    "sourceFile": "backend/src/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1731986730037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731987129540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,17 @@\n     throw new Error(\"invalid JWT token\");\r\n   }\r\n };\r\n \r\n-//token verification middleware, all routes registered after this middleware will be protected\r\n-server.addHook(\"preHandler\", verifyToken);\r\n+// 添加 verifyToken hook，但排除某些路径\r\n+server.addHook('preHandler', async (request) => {\r\n+  const excludedPaths = ['/health', '/api/auth/login', '/api/auth/register'];\r\n+  if (excludedPaths.includes(request.url)) {\r\n+    return;\r\n+  }\r\n+  \r\n+  await verifyToken(request);\r\n+});\r\n \r\n server.register(friendRoutes, { prefix: \"/api\" });\r\n \r\n // Define the WebSocket route\r\n"
                },
                {
                    "date": 1731987145853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n     throw new Error(\"invalid JWT token\");\r\n   }\r\n };\r\n \r\n-// 添加 verifyToken hook，但排除某些路径\r\n+// add verifyToken hook, but exclude some paths\r\n server.addHook(\"preHandler\", async (request) => {\r\n   const excludedPaths = [\"/health\", \"/api/auth/login\", \"/api/auth/register\"];\r\n   if (excludedPaths.includes(request.url)) {\r\n     return;\r\n"
                },
                {
                    "date": 1731991182543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,15 @@\n \r\n //add websocket\r\n \r\n const server: FastifyInstance = fastify({\r\n-  logger: {\r\n-    level: \"info\",\r\n-    transport: {\r\n-      target: \"pino-pretty\", // pretty format for log output\r\n-    },\r\n-  },\r\n+  logger: process.env.NODE_ENV === 'development' \r\n+    ? {\r\n+        transport: {\r\n+          target: 'pino-pretty'\r\n+        }\r\n+      }\r\n+    : true  // 在生产环境中使用默认日志配置\r\n });\r\n \r\n const redis = new Redis(); // Mocked Redis instance\r\n redis.set(\"key\", \"value\", \"EX\", 10); // Temporary cache with expiration\r\n"
                }
            ],
            "date": 1731986730037,
            "name": "Commit-0",
            "content": "// src/index.ts\r\nimport fastify, { FastifyInstance, FastifyRequest } from \"fastify\";\r\nimport { authRoutes } from \"./routes/auth\";\r\nimport { friendRoutes } from \"./routes/friend\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { JWTPayload } from \"./models/server\";\r\nimport fastifyWebsocket from \"@fastify/websocket\";\r\nimport Redis from \"ioredis-mock\";\r\nimport { WebSocket } from \"ws\";\r\n\r\n//add websocket\r\n\r\nconst server: FastifyInstance = fastify({\r\n  logger: {\r\n    level: \"info\",\r\n    transport: {\r\n      target: \"pino-pretty\", // pretty format for log output\r\n    },\r\n  },\r\n});\r\n\r\nconst redis = new Redis(); // Mocked Redis instance\r\nredis.set(\"key\", \"value\", \"EX\", 10); // Temporary cache with expiration\r\nredis.get(\"key\").then((value: any) => console.log(\"Cached Value:\", value));\r\n\r\n// add error handling\r\nprocess.on(\"unhandledRejection\", (err) => {\r\n  console.error(\"unhandled rejection:\", err);\r\n  process.exit(1);\r\n});\r\n\r\n// register plugins\r\nserver.register(require(\"@fastify/cors\"), {\r\n  origin: true, // allow all origins\r\n});\r\nserver.register(require(\"@fastify/formbody\"));\r\nserver.register(fastifyWebsocket, {\r\n  options: {\r\n    maxPayload: 1048576, // 1MB\r\n  },\r\n}); //register websocket\r\n\r\n\r\n// health check route\r\nserver.get(\"/health\", async () => {\r\n  return { status: \"ok\", message: \"server is running\" };\r\n});\r\n\r\n// register routes\r\nserver.register(authRoutes, { prefix: \"/api\" }); // add api prefix\r\n\r\nconst verifyToken = async (request: FastifyRequest) => {\r\n  try {\r\n    const token = request.headers.authorization?.replace(\"Bearer \", \"\");\r\n\r\n    if (!token) {\r\n      throw new Error(\"no JWT token provided\");\r\n    }\r\n\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;\r\n\r\n    // check if the token is expired\r\n    if (Date.now() >= decoded.exp * 1000) {\r\n      throw new Error(\"JWT token expired\");\r\n    }\r\n\r\n    return decoded;\r\n  } catch (error) {\r\n    throw new Error(\"invalid JWT token\");\r\n  }\r\n};\r\n\r\n//token verification middleware, all routes registered after this middleware will be protected\r\nserver.addHook(\"preHandler\", verifyToken);\r\n\r\nserver.register(friendRoutes, { prefix: \"/api\" });\r\n\r\n// Define the WebSocket route\r\nserver.get(\"/ws\", { websocket: true }, (connection: WebSocket) => {\r\n  console.log(\"new WebSocket connection established\");\r\n\r\n  connection.on(\"message\", (message: Buffer) => {\r\n    try {\r\n      console.log(\"received message:\", message.toString());\r\n      connection.send(\"Hello from server!\");\r\n    } catch (error) {\r\n      console.error(\"error when processing message:\", error);\r\n    }\r\n  });\r\n\r\n  connection.on(\"error\", (error: any) => {\r\n    console.error(\"WebSocket error:\", error);\r\n  });\r\n\r\n  connection.on(\"close\", () => {\r\n    console.log(\"connection closed\");\r\n  });\r\n});\r\n\r\nconst start = async () => {\r\n  try {\r\n    const address = await server.listen({\r\n      port: 3001,\r\n      host: \"0.0.0.0\",\r\n    });\r\n    console.log(`server started at: ${address}`);\r\n  } catch (err) {\r\n    console.error(\"server start failed:\", err);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\nstart();\r\n"
        }
    ]
}